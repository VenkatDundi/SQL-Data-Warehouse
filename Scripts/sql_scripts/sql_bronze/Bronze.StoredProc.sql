/*
**************Bronze Stored Procedures: Bulk Load & Insert Data****************
Script Purpose:
    This script performs bulk load data from raw sources, upon truncate existing tables.
	
    Run this script to load the data to bronze tables

    This file has 3 stored procedures:

    1. bronze.load_bulkData -----> This creates a stored procedure which performs bulk insert on 5 tables from various sources
    2. bronze.InsertSubcategory -----> This procedure helps in inserting the data in SubCategory table
    3. bronze.sp_InsertCustomer -----> This procedure helps in inserting the data in Customer table during implementation of Slowly Changing Dimensions
	4. bronze.load_currency -----> This creates a stored procedure which performs bulk insert from the source file for Currency [Generated by scraping the web data]
===============================================================================
*/


--EXEC bronze.load_bulkData @folderPath ='C:\Users\gnani\Downloads\DWH\Global_Electronics_Retailer\'

--drop procedure bronze.load_bulkData;

CREATE OR ALTER PROCEDURE bronze.load_bulkData 
		@folderpath NVARCHAR(500)
AS
BEGIN

    DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;
	DECLARE @sql NVARCHAR(MAX);
	DECLARE @fileName NVARCHAR(100);
	DECLARE @errorFileName NVARCHAR(100);

	-- Template with placeholders
	DECLARE @template NVARCHAR(MAX) = '
	BULK INSERT DataWarehouse.bronze.{{table}}
	FROM ''{{filePath}}''
	WITH (
		FORMAT = ''CSV'',
		FIRSTROW = 2,
		FIELDTERMINATOR = '','',
		ROWTERMINATOR = ''\n'',
		CODEPAGE = ''65001'',
		ERRORFILE = ''{{errorFile}}'',
		KEEPNULLS,
		TABLOCK
	);'

	DECLARE @template_stores NVARCHAR(MAX) = '
	BULK INSERT Practicedb.dbo.{{table}}
	FROM ''{{filePath}}''
	WITH (
		FORMAT = ''CSV'',
		FIRSTROW = 2,
		FIELDTERMINATOR = '','',
		ROWTERMINATOR = ''\n'',
		CODEPAGE = ''65001'',
		ERRORFILE = ''{{errorFile}}'',
		KEEPNULLS,
		TABLOCK
	);'

	DECLARE @template_customers NVARCHAR(MAX) = '
	BULK INSERT DataWarehouse.bronze.{{table}}
	FROM ''{{filePath}}''
	WITH (
		FORMAT = ''CSV'',
		FIRSTROW = 2,
		FIELDTERMINATOR = '','',
		ROWTERMINATOR = ''\n'',
		CODEPAGE = ''1252'',
		ERRORFILE = ''{{errorFile}}'',
		KEEPNULLS,
		TABLOCK
	);'



	-- CODEPAGE : /* To keep the formatting of encoding - Special characters */
	-- ERRORFILE : /* Save the Error rows in this file - Catch Errors */
	-- TABLOCK : /* Lock the table during this operation */
	-- KEEPNULLS : /* Keep Null values in records */
	 

    BEGIN TRY
        /* Products Table Bulk Insert */
		SET @fileName = 'Products.csv'
		SET @errorFileName = 'Products_ERROR'
        SET @batch_start_time = GETDATE();
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: bronze.erp_Products';
            TRUNCATE TABLE DataWarehouse.bronze.erp_Products;
        PRINT '>> Bulk Load into Table: bronze.erp_Products';    
		
		-- Replace placeholders
		SET @sql = REPLACE(@template, '{{table}}', 'erp_Products')
		SET @sql = REPLACE(@sql, '{{filePath}}', @folderPath + @fileName)
		SET @sql = REPLACE(@sql, '{{errorFile}}', @folderPath + @errorFileName)

		-- Execute SQL query dynamically
		EXEC sp_executesql @sql

        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> ------------------------------';


        /* Exchange Rates Table Bulk Insert */
		SET @fileName = 'ExchangeRates.csv'
		SET @errorFileName = 'ExchangeRates_Error'
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: bronze.fin_ExchangeRates';
        TRUNCATE TABLE DataWarehouse.bronze.fin_ExchangeRates;
        PRINT '>> Bulk Load into Table: bronze.fin_ExchangeRates';
		
		SET @sql = REPLACE(@template, '{{table}}', 'fin_ExchangeRates')
		SET @sql = REPLACE(@sql, '{{filePath}}', @folderPath + @fileName)
		SET @sql = REPLACE(@sql, '{{errorFile}}', @folderPath + @errorFileName)
        
		EXEC sp_executesql @sql

		SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> ------------------------------';

        
        
        /* Bulk Load Stores Table to the another database. Then, we copy  this table to the bronze layer */ 
		SET @fileName = 'Stores.csv'
		SET @errorFileName = 'Stores_Error'
		PRINT '>> Truncating Table: Practicedb.dbo.pos_Stores';
        TRUNCATE TABLE Practicedb.dbo.pos_Stores;
        PRINT '>> Bulk Load into Table: Practicedb.dbo.pos_Stores';

		SET @sql = REPLACE(@template_stores, '{{table}}', 'pos_Stores')
		SET @sql = REPLACE(@sql, '{{filePath}}', @folderPath + @fileName)
		SET @sql = REPLACE(@sql, '{{errorFile}}', @folderPath + @errorFileName)

		EXEC sp_executesql @sql

        /* Stores Table - Copy of a relation from the database to the bronze layer of Data Warehouse */

        BEGIN TRY
            BEGIN TRANSACTION;
        PRINT '>> Truncating Table: bronze.pos_Stores';
            DECLARE @rowcount_before INT = (SELECT COUNT(*) FROM DataWarehouse.bronze.pos_Stores);
            TRUNCATE TABLE DataWarehouse.bronze.pos_Stores;
        PRINT '>> Copy Table to Bronze Layer: bronze.pos_Stores';
            INSERT INTO DataWarehouse.bronze.pos_Stores
            SELECT * FROM Practicedb.dbo.pos_Stores;
            DECLARE @rowcount_after INT = (SELECT COUNT(*) FROM DataWarehouse.bronze.pos_Stores);
            PRINT 'Rows before: ' + CAST(@rowcount_before AS VARCHAR);
            PRINT 'Rows after: ' + CAST(@rowcount_after AS VARCHAR);
            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION;
            PRINT 'Error: ' + ERROR_MESSAGE();
        END CATCH;



        /* Customers Table Bulk Insert */
        
		SET @fileName = 'Customers.csv'
		SET @errorFileName = 'Customers_Error'
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: bronze.crm_Customers';
            TRUNCATE TABLE DataWarehouse.bronze.crm_Customers;
        PRINT '>> Bulk Load into Table: bronze.crm_Customers';

		SET @sql = REPLACE(@template_customers, '{{table}}', 'crm_Customers')
		SET @sql = REPLACE(@sql, '{{filePath}}', @folderPath + @fileName)
		SET @sql = REPLACE(@sql, '{{errorFile}}', @folderPath + @errorFileName)

		EXEC sp_executesql @sql

        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> ------------------------------';
        


        /* Category Table Bulk Insert */
		
		SET @fileName = @folderPath + 'Category.json'
        SET @start_time = GETDATE();
        PRINT '>> Truncating Table: bronze.erp_Category';
            TRUNCATE TABLE DataWarehouse.bronze.erp_Category;
        PRINT '>> Bulk Load into Table: bronze.erp_Category';


		SET @sql = '
				DECLARE @json NVARCHAR(MAX);
				-- Import entire JSON file as a string
				SELECT @json = BulkColumn					
				FROM OPENROWSET (
					BULK ''' + @fileName + ''',
					SINGLE_CLOB
				) AS [import];
				-- Insert with proper JSON key mappings
				INSERT INTO DataWarehouse.bronze.erp_Category (
					erp_CategoryKey,
					erp_CategoryName,
					erp_CategoryManager,
					erp_CategoryType,
					erp_IsSeasonal,
					erp_LaunchYear,
					erp_CategoryStatus,
					erp_CreatedDate,
					erp_UpdatedDate
				)
				-- Json output from a string to Tabular format
				SELECT *
				FROM OPENJSON(@json)
				-- Name Mappings from the JSON file
				WITH (
					erp_CategoryKey INT              ''$."cat key"'',
					erp_CategoryName NVARCHAR(50)    ''$."cat"'',
					erp_CategoryManager NVARCHAR(50) ''$."mgr"'',
					erp_CategoryType NVARCHAR(50)    ''$."cat type"'',
					erp_IsSeasonal NVARCHAR(10)      ''$."seasonal"'',
					erp_LaunchYear INT               ''$."Launched"'',
					erp_CategoryStatus NVARCHAR(20)  ''$."CategoryStatus"'',
					erp_CreatedDate DATETIME         ''$."Created"'',
					erp_UpdatedDate DATETIME         ''$."Updated"''
				);'

			EXEC sp_executesql @sql;

        SET @end_time = GETDATE();
        PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
        PRINT '>> ------------------------------';

        SET @batch_end_time = GETDATE();
        PRINT '=========================================='
        PRINT 'Loading Bronze Layer is Completed';
        PRINT '   - Total Load Duration: ' + CAST(DATEDIFF(SECOND, @batch_start_time, @batch_end_time) AS NVARCHAR) + ' seconds';
        PRINT '=========================================='
    END TRY
	BEGIN CATCH
		PRINT '=========================================='
		PRINT 'ERROR OCCURED DURING LOADING BRONZE LAYER'
		PRINT 'Error Message' + ERROR_MESSAGE();
		PRINT 'Error Message' + CAST (ERROR_NUMBER() AS NVARCHAR);
		PRINT 'Error Message' + CAST (ERROR_STATE() AS NVARCHAR);
		PRINT '=========================================='
	END CATCH
END

/* SubCategory Table Insert Procedure */

--drop procedure bronze.sp_InsertSubcategory

CREATE PROCEDURE bronze.sp_InsertSubcategory
    @erp_SubcategoryKey INT,
    @erp_Subcategory NVARCHAR(100),
    @erp_CategoryKey INT,
    @erp_SubcategoryManager NVARCHAR(100),
    @erp_TargetMarketSegment NVARCHAR(100),
    @erp_ProductCount INT,
    @erp_AvgUnitPrice DECIMAL(10,2),
    @erp_SubcategoryStatus NVARCHAR(20),
    @erp_CreatedDate DATETIME,
    @erp_UpdatedDate DATETIME
AS
BEGIN
    INSERT INTO bronze.erp_Subcategory (
        erp_SubcategoryKey, erp_Subcategory, erp_CategoryKey,
        erp_SubcategoryManager, erp_TargetMarketSegment, erp_ProductCount,
        erp_AvgUnitPrice, erp_SubcategoryStatus, erp_CreatedDate, erp_UpdatedDate
    )
    VALUES (
        @erp_SubcategoryKey, @erp_Subcategory, @erp_CategoryKey,
        @erp_SubcategoryManager, @erp_TargetMarketSegment, @erp_ProductCount,
        @erp_AvgUnitPrice, @erp_SubcategoryStatus, @erp_CreatedDate, @erp_UpdatedDate
    )
END


/* Stored procedure to insert the customers */

--drop procedure bronze.sp_InsertCustomer

CREATE PROCEDURE bronze.sp_InsertCustomer
    @CustomerKey INT,
    @Gender NVARCHAR(50),
    @Name NVARCHAR(50),
    @City NVARCHAR(50),
    @StateCode NVARCHAR(10),
    @State NVARCHAR(50),
    @ZipCode NVARCHAR(10),
    @Country NVARCHAR(50),
    @Continent NVARCHAR(50),
    @Birthday DATE,
    @StartDate DATE,
    @EndDate DATE,
    @IsActive INT
AS
BEGIN
    INSERT INTO bronze.crm_Customers (
        cst_CustomerKey, cst_Gender, cst_Name, cst_City, cst_StateCode, cst_State,
        cst_ZipCode, cst_Country, cst_Continent, cst_Birthday, cst_StartDate, cst_EndDate, cst_IsActive
    )
    VALUES (
        @CustomerKey, @Gender, @Name, @City, @StateCode, @State,
        @ZipCode, @Country, @Continent, @Birthday, @StartDate, @EndDate, @IsActive
    );
END;




/* Stored procedure to insert the Currency Data from Web scraping */

-- This stored procedure expects a folder path as parameter in which the source file is located

--EXEC bronze.load_currency @folderPath ='C:\Users\gnani\Downloads\DWH\Global_Electronics_Retailer\'


CREATE OR ALTER PROCEDURE bronze.load_currency 
		@folderpath NVARCHAR(500)
AS
BEGIN

	DECLARE @sql NVARCHAR(MAX);
	DECLARE @fileName NVARCHAR(100);
	DECLARE @errorFileName NVARCHAR(100);

	-- Template with placeholders
	DECLARE @template_currency NVARCHAR(MAX) = '
	BULK INSERT DataWarehouse.bronze.{{table}}
	FROM ''{{filePath}}''
	WITH (
		FORMAT = ''CSV'',
		FIRSTROW = 2,
		FIELDTERMINATOR = '','',
		ROWTERMINATOR = ''\n'',
		CODEPAGE = ''65001'',
		ERRORFILE = ''{{errorFile}}'',
		KEEPNULLS,
		TABLOCK
	);'

	-- CODEPAGE : /* To keep the formatting of encoding - Special characters */
	-- ERRORFILE : /* Save the Error rows in this file - Catch Errors */
	-- TABLOCK : /* Lock the table during this operation */
	-- KEEPNULLS : /* Keep Null values in records */

    BEGIN TRY
        /* Currency Table Bulk Insert */
		SET @fileName = 'CurrencyData.csv'
		SET @errorFileName = 'Currency_ERROR'
        PRINT '>> Truncating Table: bronze.fin_CurrencyData';
            TRUNCATE TABLE DataWarehouse.bronze.fin_CurrencyData;
        PRINT '>> Bulk Load into Table: bronze.fin_CurrencyData';    
		
		-- Replace placeholders
		SET @sql = REPLACE(@template_currency, '{{table}}', 'fin_CurrencyData')
		SET @sql = REPLACE(@sql, '{{filePath}}', @folderPath + @fileName)
		SET @sql = REPLACE(@sql, '{{errorFile}}', @folderPath + @errorFileName)

		-- Execute SQL query dynamically
		EXEC sp_executesql @sql

    END TRY
	BEGIN CATCH
		PRINT '=========================================='
		PRINT 'ERROR OCCURED DURING LOADING BRONZE LAYER'
		PRINT 'Error Message' + ERROR_MESSAGE();
		PRINT 'Error Message' + CAST (ERROR_NUMBER() AS NVARCHAR);
		PRINT 'Error Message' + CAST (ERROR_STATE() AS NVARCHAR);
		PRINT '=========================================='
	END CATCH
END